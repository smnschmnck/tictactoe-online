{"version":3,"sources":["App.tsx","index.tsx"],"names":["socket","WebSocket","window","location","origin","replace","onopen","localStorage","getItem","room","removeItem","send","JSON","stringify","status","WaitingRoom","roomID","useState","buttonText","setButtonText","copied","setCopied","showQR","setShowQR","link","href","className","onClick","navigator","clipboard","writeText","value","size","JoinRoom","inputID","setInputID","onSubmit","e","preventDefault","placeholder","onChange","target","autoFocus","App","joined","setJoined","setRoomID","showBoard","setShowBoard","gameInfo","setGameInfo","showNewGame","setShowNewGame","document","title","newBoard","board","i","row","j","push","fieldVal","claimed","winningField","setBoard","onmessage","data","message","parse","xo","XO","turn","winner","tmpBoard","x","winningFields","length","alert","reload","errorMessage","map","field","addPlayerToField","style","visibility","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ab46c4cc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport QRCode from \"react-qr-code\";\n//const socket = new WebSocket('ws://localhost:3030');\nconst socket = new WebSocket(window.location.origin.replace(/^http/, 'ws'))\n\nsocket.onopen = () => {\n  if(localStorage.getItem(\"room\")){\n    const room = localStorage.getItem(\"room\");\n    localStorage.removeItem(\"room\");\n    socket.send(JSON.stringify({status: \"requestToJoin\", room: room}));\n  }\n}\n\nconst App = () => {\n  const[joined, setJoined] = useState(false);\n  const[roomID, setRoomID] = useState(\"\");\n  const[showBoard, setShowBoard] = useState(false);\n  const[gameInfo, setGameInfo] = useState(\"\");\n  const[showNewGame, setShowNewGame] = useState(false);\n\n \n  if(roomID){\n    document.title = \"TicTacToe - Room: \" + roomID;\n  }else{\n    document.title = \"TicTacToe\";\n  }\n\n  const newBoard = () => {\n    let board: {fieldVal: string, claimed: boolean, winningField: boolean}[][] = [];\n    for(let i = 0; i<3; i++){\n        let row: {fieldVal: string, claimed: boolean, winningField: boolean}[] = [];\n        for(let j = 0; j<3; j++){\n            row.push({fieldVal: \"\", claimed: false, winningField: false});\n        }\n        board.push(row);\n    }\n    return board;\n  }\n\n  const[board, setBoard] = useState(newBoard());\n  \n  socket.onmessage = ({data}) => {\n    const message = JSON.parse(data);\n    switch (message.status) {\n      case \"join\":\n        setJoined(true);\n        setRoomID(message.room)\n        break;\n      case \"board\":\n        if(showNewGame){\n          setShowNewGame(false);\n        }\n        setBoard(message.board);\n        setShowBoard(true);\n        const xo = message.XO;\n        setGameInfo(message.turn ? \"Your turn as \" + xo : \"Wait\");\n        break;\n      case \"end\":\n        if(message.winner !== \"Tie\"){\n          setGameInfo(\"Winner: \" + message.winner);\n          let tmpBoard = newBoard();\n          for(let i = 0; i<3; i++){\n            for(let j = 0; j<3; j++){\n              tmpBoard[i][j].claimed = true;\n              tmpBoard[i][j].fieldVal = board[i][j].fieldVal;\n            }\n          }\n          for(let x = 0; x<message.winningFields.length; x++){\n            const i = message.winningFields[x].i;\n            const j = message.winningFields[x].j;\n            tmpBoard[i][j].winningField = true;\n          }\n          setBoard(tmpBoard);\n        }else{\n          setGameInfo(\"Tie!\");\n        }\n        setShowNewGame(true);\n        break;\n      case \"disconnect\":\n        alert(\"Other player disconnected! Refresh page to start a new game.\")\n        window.location.reload();\n        break;\n      case \"error\":\n        alert(message.errorMessage);\n        break;\n      default:\n        break;\n    }\n  }\n\n  const addPlayerToField = (i: number, j: number) => {\n    socket.send(JSON.stringify({status: \"move\", room: roomID, i: i, j: j}));\n  }\n\n  const clearBoard = () => {\n    socket.send(JSON.stringify({status: \"newgame\", room: roomID}));\n  }\n\n  return(\n    <div className=\"App\">\n        <div className=\"Main\">\n        {joined ? \n          <div className=\"Game\">\n            {showBoard ? \n            <div className=\"Board\">\n                <h1 className=\"Winner\">{gameInfo}</h1>\n                {board.map((row , i) => \n                  <div className=\"Row\" key={i}>{row.map((field, j) => \n                    <button \n                      className={field.winningField ? \"WinningField\" : \"Field\"}\n                      key={i+\":\"+j} \n                      onClick={() => addPlayerToField(i, j)}>\n                    {field.fieldVal}</button>)}\n                  </div>)}\n                  <button className=\"NewGameButton\" style={{visibility: showNewGame ? 'visible' : 'hidden'}} onClick={() => clearBoard()}>New Game</button>\n            </div> : <WaitingRoom roomID={roomID}/> }\n          </div>\n        : <JoinRoom/>}\n      </div>\n    </div>\n  );\n}\n\ninterface waitingRoomProps{\n  roomID: string;\n}\n\nconst WaitingRoom: React.FC<waitingRoomProps> = ({roomID}) => {\n  const[buttonText, setButtonText] = useState(\"Copy Invite\");\n  const[copied, setCopied] = useState(false);\n  const[showQR, setShowQR] = useState(false)\n  const link = window.location.href + \"room/\" + roomID;\n\n  const shareLink = () => {\n    navigator.clipboard.writeText(link);\n    setButtonText(\"Copied!\");\n    setCopied(true);\n  }\n\n  return(\n    <div className=\"WaitingRoom\">\n      <div>\n        <p className=\"Waiting\">Waiting for player 2</p>\n        <p className=\"ShowRoomID\"><b>Room ID: </b>{roomID}</p>\n      </div>\n      <div className=\"ShareDiv\">\n        <button className={copied ? \"CopiedButton\" : \"CopyButton\"} onClick={() => shareLink()}>{buttonText}</button>\n        <div className=\"QRDiv\">\n          {showQR ? \n            <QRCode className=\"QR\" value={link} size={150}/> : \n            <button className=\"QRButton\" onClick={() => setShowQR(true)}>Show QR Code Invite</button> \n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst JoinRoom = () => {\n  const[inputID, setInputID] = useState(\"\");\n\n  const requestID = () => {\n    socket.send(JSON.stringify({status: \"idRequest\"}));\n  }\n\n  const sendJoinRequest = () => {\n    socket.send(JSON.stringify({status: \"requestToJoin\", room: inputID}));\n  }\n\n  return(\n    <div className=\"JoinRoom\">\n      <form className=\"RoomForm\" onSubmit={e => e.preventDefault()}>\n        <h1>Join Room</h1>\n        <div className=\"RoomFormControls\">\n          <input className=\"RoomInput\" placeholder=\"Room ID\" onChange={e => setInputID(e.target.value)} autoFocus/>\n          <button className=\"JoinRoomButton\" onClick={() => sendJoinRequest()}>Join</button>\n        </div>\n      </form>\n      <h1>or</h1>\n      <div className=\"CreateRoom\">\n        <h1>Create Room</h1>\n        <button className=\"JoinRoomButton\" onClick={() => requestID()}>Create Room</button>\n      </div>\n    </div>\n\n  );\n} \n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}